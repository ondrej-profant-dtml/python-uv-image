name: Build and Push Docker Image to GHCR

on:
  push:
    branches:
      - 'main'
  # Trigger on new tag starting with 'v' (e.g. v1.0.0)
  release:
    types: [published]

  # Allows manual workflow run from GitHub UI
  workflow_dispatch:

# Definition of jobs to be executed
jobs:
  build-and-push:
    # Job name
    name: Build and Push to GHCR
    # Use the latest Ubuntu runner provided by GitHub
    runs-on: ubuntu-latest

    # Set permissions for GITHUB_TOKEN to allow writing to ghcr.io
    permissions:
      contents: read
      packages: write

    # Individual steps of the job
    steps:
      # 1. Step: Checkout the repository code into the runner environment
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Step: Log in to GitHub Container Registry (ghcr.io)
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          # Use the username of the workflow trigger (your account)
          username: ${{ github.actor }}
          # Use the automatically generated GITHUB_TOKEN for login, no PAT needed
          password: ${{ secrets.GITHUB_TOKEN }}

      # 3. Step: Extract metadata (tags, labels) for the Docker image
      # This smart step automatically creates the correct tags.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            # Create 'latest' tag when pushing to the 'main' branch
            type=raw,value=latest,enable={{is_default_branch}}
            # Create tag based on Git tag name (e.g. v1.2.3 -> 1.2.3)
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      # 4. Step: Build the image and push it to ghcr.io
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: . # Build context is the repository root
          push: true # Push the image after building
          tags: ${{ steps.meta.outputs.tags }} # Use tags generated in step 3
          labels: ${{ steps.meta.outputs.labels }} # Add labels (e.g. repository link)